<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xusiwei&#39;s blog</title>
    <link>https://xusiwei.github.io/</link>
    <description>Recent content on xusiwei&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Tue, 08 Mar 2016 22:58:33 +0800</lastBuildDate>
    <atom:link href="https://xusiwei.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>docker 入门指南</title>
      <link>https://xusiwei.github.io/post/2016/docker-get-start/</link>
      <pubDate>Tue, 08 Mar 2016 22:58:33 +0800</pubDate>
      
      <guid>https://xusiwei.github.io/post/2016/docker-get-start/</guid>
      <description>

&lt;p&gt;本文是实践官方“Get Started”的一个记录，由于我的桌面系统是Debian 8，本文的操作仅确保在 Debian 8 上正确。
指南链接（Linux版）： &lt;a href=&#34;https://docs.docker.com/linux/&#34;&gt;https://docs.docker.com/linux/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装-docker:c57648232b8ca5cef6cec3c0bc434e73&#34;&gt;安装 Docker&lt;/h2&gt;

&lt;h3 id=&#34;官方脚本安装:c57648232b8ca5cef6cec3c0bc434e73&#34;&gt;官方脚本安装&lt;/h3&gt;

&lt;p&gt;如果没有 curl ，先安装 curl&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用curl下载安装脚本并运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -fsSL https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装成功后会提示你，使用如下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo usermod -aG docker xu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将当前用户（xu）加到docker组，此后运行docker可以不加sudo。另外，让当前用户的组别改变需要重新登录（先log out再log in）。&lt;/p&gt;

&lt;h3 id=&#34;验证:c57648232b8ca5cef6cec3c0bc434e73&#34;&gt;验证&lt;/h3&gt;

&lt;h3 id=&#34;bash:c57648232b8ca5cef6cec3c0bc434e73&#34;&gt;bash&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker run -i -t debian docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以用docker创建一个交互的bash会话，在新的会话中运行ps -ef：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xu@debian:~$ docker run -i -t debian bash
root@d99cc11447c7:/#
root@d99cc11447c7:/#
root@d99cc11447c7:/# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  2 15:32 ?        00:00:00 bash
root         8     1  0 15:32 ?        00:00:00 ps -ef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，仅有两个进程，而且pid都非常小。这说明，这个会话环境已经与外界隔离了。&lt;/p&gt;

&lt;h4 id=&#34;hello-world:c57648232b8ca5cef6cec3c0bc434e73&#34;&gt;hello world&lt;/h4&gt;

&lt;p&gt;安装成功后，验证：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@host$ docker run hello-world
Unable to find image &#39;hello-world:latest&#39; locally
latest: Pulling from library/hello-world
535020c3e8ad: Pull complete
af340544ed62: Pull complete
Digest: sha256:a68868bfe696c00866942e8f5ca39e3e31b79c1e50feaee4ce5e28df2f051d5c
Status: Downloaded newer image for hello-world:latest

Hello from Docker.
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker Engine CLI client contacted the Docker Engine daemon.
 2. The Docker Engine daemon pulled the &amp;quot;hello-world&amp;quot; image from the Docker Hub.
 3. The Docker Engine daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker Engine daemon streamed that output to the Docker Engine CLI client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker Hub account:
 https://hub.docker.com

For more examples and ideas, visit:
 https://docs.docker.com/userguide/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中，&lt;code&gt;Hello from Docker.&lt;/code&gt;及以后的内容是docker运行的结果，前面是镜像下载的log。&lt;/p&gt;

&lt;h3 id=&#34;软件源安装:c57648232b8ca5cef6cec3c0bc434e73&#34;&gt;软件源安装&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install docker-engine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通常版本较低（不推荐）。&lt;/p&gt;

&lt;h2 id=&#34;关于image和container:c57648232b8ca5cef6cec3c0bc434e73&#34;&gt;关于image和container&lt;/h2&gt;

&lt;p&gt;刚才的一个&lt;code&gt;docker run hello-world&lt;/code&gt;命令，包含了docker引擎的主要工作，命令的三部分：
&lt;img src=&#34;https://xusiwei.github.io/post/2016/docker-cmd-struct.png&#34; alt=&#34;docker command structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;container&lt;/code&gt;（容器）是一个最精简的Linux操作系统。&lt;code&gt;image&lt;/code&gt;（镜像）是可以装载到&lt;code&gt;container&lt;/code&gt;的软件。
敲下hello-world命令后，docker引擎：
* 检查本地是否已经有&lt;code&gt;hello-world&lt;/code&gt;镜像
* 如果没有，从Docker Hub下载该镜像
* 将镜像装入容器并运行它&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hello-world&lt;/code&gt;进行输出一些信息后就退出了。一般情况下，镜像的具体行为和它的构建过程有关。&lt;/p&gt;

&lt;p&gt;Docker镜像的功能远不至于此，它可以是像数据库那样的复杂软件，运行后等待你（或其他人）向其中添加数据。&lt;/p&gt;

&lt;p&gt;Docker引擎让创建并分享软件变得简单——Docker容器总能保证镜像能够运行。&lt;/p&gt;

&lt;h2 id=&#34;寻找-运行别人创建的镜像-docker-hub:c57648232b8ca5cef6cec3c0bc434e73&#34;&gt;寻找、运行别人创建的镜像 —— Docker Hub&lt;/h2&gt;

&lt;p&gt;Docker Hub和GitHub类似，只是Docker Hub上托管的是Docker镜像而不是源码，这里你同样可给关注的镜像star。&lt;/p&gt;

&lt;p&gt;在Docker Hub上能找到来自世界各地的人创建的docker镜像，docker hub的explore和GitHub的explore也非常类似，可在浏览其他人都创建了那些镜像，也能够看到各个镜像有多少star。&lt;/p&gt;

&lt;p&gt;官方的&lt;code&gt;Get Started&lt;/code&gt;里面以whalesay为例演示了如何用Docker Hub：
1. 在Docker Hub上搜索whalesay镜像
2. 运行whalesay镜像&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run docker/whalesay cowsay boo
_____
&amp;lt; boo &amp;gt;
-----
   \
    \
     \
                   ##        .
             ## ## ##       ==
          ## ## ## ##      ===
      /&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;___/ ===
 ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~
      \______ o          __/
       \    \        __/
         \____\______/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;whalesay是一个基于ubuntu 14.04构建的、命令行下输出字符图像的镜像，just for fun。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NGINX 源码安装</title>
      <link>https://xusiwei.github.io/post/2016/nginx-source-install/</link>
      <pubDate>Mon, 07 Mar 2016 23:35:28 +0800</pubDate>
      
      <guid>https://xusiwei.github.io/post/2016/nginx-source-install/</guid>
      <description>

&lt;p&gt;NIGNX 是由 Igor Sysoev 开发的一个 Web 服务器。
官网：&lt;a href=&#34;http://nginx.org/&#34;&gt;http://nginx.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载页面： &lt;a href=&#34;http://nginx.org/en/download.html&#34;&gt;http://nginx.org/en/download.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;下载-nginx:52a4c6da7db903582370865375f9a938&#34;&gt;下载 NGINX&lt;/h2&gt;

&lt;p&gt;以 1.8.1 版本为例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://nginx.org/download/nginx-1.8.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;下载依赖库:52a4c6da7db903582370865375f9a938&#34;&gt;下载依赖库&lt;/h2&gt;

&lt;p&gt;NGINX必须依赖zlib和pcre, (若想让nginx支持HTTPS协议，还需OpenSSL)&lt;/p&gt;

&lt;p&gt;NGINX 使用zlib进行gzip编/解码（压缩/解压缩）， zlib: &lt;a href=&#34;http://zlib.net/&#34;&gt;http://zlib.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 zlib-1.2.8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://zlib.net/zlib-1.2.8.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NGINX 使用pcre作正则表达式匹配， pcre: &lt;a href=&#34;http://pcre.org/&#34;&gt;http://pcre.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ftp: &lt;a href=&#34;ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/&#34;&gt;ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 pcre-8.38:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解压:52a4c6da7db903582370865375f9a938&#34;&gt;解压&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;tar xzvf nginx-1.8.1.tar.gz

tar xzvf zlib-1.2.8.tar.gz

tar xzvf pcre-8.38.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;编译:52a4c6da7db903582370865375f9a938&#34;&gt;编译&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd nginx-1.8.1/

./configure --with-pcre=../pcre-8.38 --with-zlib=../zlib-1.2.8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装:52a4c6da7db903582370865375f9a938&#34;&gt;安装&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认将会安装到 &lt;code&gt;/usr/local/nginx&lt;/code&gt; 目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xusiwei@github:/usr/local/nginx$ tree
.
├── conf
│   ├── fastcgi.conf
│   ├── fastcgi.conf.default
│   ├── fastcgi_params
│   ├── fastcgi_params.default
│   ├── koi-utf
│   ├── koi-win
│   ├── mime.types
│   ├── mime.types.default
│   ├── nginx.conf
│   ├── nginx.conf.default
│   ├── scgi_params
│   ├── scgi_params.default
│   ├── uwsgi_params
│   ├── uwsgi_params.default
│   └── win-utf
├── html
│   ├── 50x.html
│   └── index.html
├── logs
└── sbin
    └── nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;启动:52a4c6da7db903582370865375f9a938&#34;&gt;启动&lt;/h2&gt;

&lt;p&gt;源码编译安装生成的可执行文件位于 &lt;code&gt;/usr/local/nginx/sbin/&lt;/code&gt;目录下，所以还需要将该目录加到&lt;code&gt;$PATH&lt;/code&gt;下，
或者在&lt;code&gt;$PATH&lt;/code&gt;的某个目录中创建一个符号链接指向 &lt;code&gt;/usr/local/nginx/sbin/nginx&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xusiwei@github:~$ cd /usr/local/bin/
xusiwei@github:/usr/local/bin$ sudo ln -s /usr/local/nginx/sbin/nginx nginx
xusiwei@github:/usr/local/bin$ nginx -v
nginx version: nginx/1.8.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，就可以启动了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xusiwei@github:~$ sudo nginx
xusiwei@github:~$
xusiwei@github:~$ ps -ef | grep nginx
xu       26065 24955  2 3月07 pts/2   00:00:53 kwrite content/post/2016/nginx-source-warmup.md
root     30077     1  0 00:08 ?        00:00:00 nginx: master process nginx
nobody   30078 30077  0 00:08 ?        00:00:00 nginx: worker process
xu       30080 17554  0 00:08 pts/1    00:00:00 grep nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不加参数启动，将会使用默认配置文件： &lt;code&gt;/usr/local/nginx/conf/nginx.conf&lt;/code&gt;，并以 &lt;code&gt;/usr/local/nginx/&lt;/code&gt; 为工作目录&lt;/p&gt;

&lt;h2 id=&#34;测试:52a4c6da7db903582370865375f9a938&#34;&gt;测试&lt;/h2&gt;

&lt;p&gt;此时可以使用浏览器 &lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt; 或 &lt;a href=&#34;http://127.0.0.1&#34;&gt;http://127.0.0.1&lt;/a&gt; 看到效果了&lt;/p&gt;

&lt;p&gt;如果是server版系统，可以用curl测试：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xusiwei@github:~$ curl http://localhost
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a href=&amp;quot;http://nginx.org/&amp;quot;&amp;gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a href=&amp;quot;http://nginx.com/&amp;quot;&amp;gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you for using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;停止:52a4c6da7db903582370865375f9a938&#34;&gt;停止&lt;/h2&gt;

&lt;p&gt;粗暴的方式，可以直接kill掉 nginx：
    * 先用 &lt;code&gt;ps -ef | grep nginx&lt;/code&gt; 找到nginx的pid，再用 &lt;code&gt;kill pid&lt;/code&gt;杀掉nginx
    * killall nginx
nginx -s参数提供了优雅的停止nginx的操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nginx -s stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初次之外， -s 还有 quit, reopen, reload&lt;/p&gt;

&lt;h2 id=&#34;关于软件源安装:52a4c6da7db903582370865375f9a938&#34;&gt;关于软件源安装&lt;/h2&gt;

&lt;p&gt;多数发行版的 软件源 中都已经收录了nginx，但通常版本都比较;
另外，如果你的发行版所属的发行商已经不再维护那个版本了，比如ubuntu 10.04，
所以，不推荐从默认软件源安装。&lt;/p&gt;

&lt;p&gt;但如果觉得自己编译麻烦，可以从nginx.org的“源”安装预先编译好的软件包，具体步骤参见：&lt;a href=&#34;http://nginx.org/en/linux_packages.html&#34;&gt;http://nginx.org/en/linux_packages.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用Hugo和GitHub Pages搭建博客</title>
      <link>https://xusiwei.github.io/post/2016/build-blog-with-hugo-and-github-pages/</link>
      <pubDate>Sun, 21 Feb 2016 16:36:54 +0800</pubDate>
      
      <guid>https://xusiwei.github.io/post/2016/build-blog-with-hugo-and-github-pages/</guid>
      <description>

&lt;p&gt;从前天晚上开始尝试了一下用Hugo和GitHub Pages搭建静态博客，总体还算顺利（主要是Hugo用起来比较方便）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于 Hugo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hugo 是由 spf13 创建的一个静态网站生成器，首页：&lt;a href=&#34;https://www.gohugo.io/&#34;&gt;https://www.gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;hugo-工作流:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;Hugo 工作流&lt;/h1&gt;

&lt;p&gt;下面将介绍Hugo的完整工作流程：&lt;/p&gt;

&lt;h2 id=&#34;快速安装:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;快速安装&lt;/h2&gt;

&lt;p&gt;在 &lt;a href=&#34;https://www.gohugo.io/&#34;&gt;https://www.gohugo.io/&lt;/a&gt; 能够找到 Homebrew 安装 Hugo的命令，&lt;/p&gt;

&lt;p&gt;以及Download： &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载对应的操作系统版本的Hugo二进制文件（hugo或者hugo.exe），添加到&lt;code&gt;$PATH&lt;/code&gt;能找到的目录下。&lt;/p&gt;

&lt;h2 id=&#34;创建站点:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;创建站点&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会在mysite目录生成原始（未经渲染的）站点，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd mysite
$ tree mysite
.
├── archetypes
├── config.toml
├── content
├── data
├── layouts
└── static

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建文章:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;创建文章&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new about.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会在content下创建一个about.md。&lt;/p&gt;

&lt;h2 id=&#34;安装主题:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;安装主题&lt;/h2&gt;

&lt;p&gt;在 &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;http://themes.gohugo.io/&lt;/a&gt; 选号主题之后，将对应主题下载到 &lt;code&gt;themes/&lt;/code&gt; 下，如hyde。&lt;/p&gt;

&lt;h3 id=&#34;配置主题:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;配置主题&lt;/h3&gt;

&lt;p&gt;不同主题会有不同可配置的参数，按照说明修改config.toml即可。&lt;/p&gt;

&lt;h2 id=&#34;生成页面:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;生成页面&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ hugo --theme=hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该命令会将所有md渲染成HTML。&lt;/p&gt;

&lt;h3 id=&#34;本地预览:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;本地预览&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --theme=hyde --buildDrafts --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可在本地预览渲染效果。&lt;/p&gt;

&lt;h2 id=&#34;发布:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;发布&lt;/h2&gt;

&lt;p&gt;hugo命令默认生成html到 &lt;code&gt;public/&lt;/code&gt; 下，可用 &lt;code&gt;-d&lt;/code&gt; 选项渲染结果指向其他目录，
或者在执行hugo命令前将 创建软连接 public 指向其他目录。&lt;/p&gt;

&lt;p&gt;GitHug Pages提供了静态网页和Jeklly生成器功能，可以在 &lt;code&gt;USERNAME.githug.io&lt;/code&gt; 仓库
或其他仓库的&lt;code&gt;gh-pages&lt;/code&gt;分支部署静态网页，或Jeklly原始页面。&lt;/p&gt;

&lt;h1 id=&#34;hugo-jeklly-hexo-简单对比:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;Hugo, Jeklly, Hexo 简单对比&lt;/h1&gt;

&lt;p&gt;在使用 Hugo 之前，我先后尝试了 Hexo、Jeklly， 说说感受。
Hexo的npm安装需要依赖很多其他node库，在网络条件不好的情况下，光安装就很费劲。
Jeklly也是，虽然相对Hexo来说依赖要少一些，但安装其他还是略显麻烦。&lt;/p&gt;

&lt;p&gt;在经历过Hexo, Jeklly的痛苦之后，在安装Hugo的时候我直接选择了二进制安装。
这可能和实现技术有关。Hugo, Jeklly, Hexo分别是基于Go, Ruby, Node.js。
Go的编译型语言特性让Hugo&lt;strong&gt;更容易&lt;/strong&gt;“二进制安装”。&lt;/p&gt;

&lt;p&gt;所以相对来说，Hugo的主要优势在于安装方便，据说生成速度也更快。&lt;/p&gt;

&lt;h1 id=&#34;github-pages-相对其他博客的好处:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;GitHub Pages 相对其他博客的好处&lt;/h1&gt;

&lt;p&gt;对于程序员来说，GitHub Pages相对于：
1. 注册类的博客网站，如CSDN
2. 自建独立博客，如WrodPress&lt;/p&gt;

&lt;p&gt;GitHub Pages方式的好处在于————可以象管理代码一样管理博客，用git管理博客变更。&lt;/p&gt;

&lt;p&gt;正如 &lt;a href=&#34;https://github.com/ruanyf&#34;&gt;@ruanyf&lt;/a&gt; 所说，“他们既拥有绝对管理权，
又享受github带来的便利&amp;mdash;-不管何时何地，只要向主机提交commit，就能发布新文章。
更妙的是，这一切还是免费的，github提供无限流量，世界各地都有理想的访问速度。”&lt;/p&gt;

&lt;h1 id=&#34;参考链接:12928e9650273f3ab009a12bccc3ed6e&#34;&gt;参考链接&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;hugo中文文档 &lt;a href=&#34;http://gohugo.org/&#34;&gt;gohugo.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;http://blog.coderzh.com/2015/08/29/hugo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&#34;&gt;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://xusiwei.github.io/about/</link>
      <pubDate>Sat, 20 Feb 2016 00:17:56 +0800</pubDate>
      
      <guid>https://xusiwei.github.io/about/</guid>
      <description>&lt;p&gt;大家好，我是&lt;strong&gt;许思维&lt;/strong&gt;，自认为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有文化（上过几年学）&lt;/li&gt;
&lt;li&gt;有思想（读过几本书）&lt;/li&gt;
&lt;li&gt;有技术（写过一些代码）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;职业: 码农&lt;/p&gt;

&lt;p&gt;技能：C++, Java, Python, Android&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;业余爱好&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;读书（或许算不上爱好）&lt;/li&gt;
&lt;li&gt;喝茶（仅喜欢味道，说不出个所以然）&lt;/li&gt;
&lt;li&gt;太极（大学时学过几年，如今闲暇时自娱）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;链接&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/xusiwei&#34;&gt;https://github.com/xusiwei&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新浪微博: &lt;a href=&#34;http://weibo.com/xu4v&#34;&gt;http://weibo.com/xu4v&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CSDN博客： &lt;a href=&#34;http://blog.csdn.net/xusiwei1236&#34;&gt;http://blog.csdn.net/xusiwei1236&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;豆瓣书单: &lt;a href=&#34;http://book.douban.com/people/xu4v&#34;&gt;http://book.douban.com/people/xu4v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>你好，世界</title>
      <link>https://xusiwei.github.io/post/hello-world/</link>
      <pubDate>Fri, 19 Feb 2016 23:16:09 +0800</pubDate>
      
      <guid>https://xusiwei.github.io/post/hello-world/</guid>
      <description>

&lt;p&gt;这是一篇测试博客，在这你将看到Hugo对Markdown的渲染效果。&lt;/p&gt;

&lt;h1 id=&#34;关于-hugo:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;关于 Hugo&lt;/h1&gt;

&lt;p&gt;Hugo是一个静态网站生成器&lt;/p&gt;

&lt;h1 id=&#34;headers:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Headers&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;# This is an `&amp;lt;h1&amp;gt;` tag
## This is an `&amp;lt;h2&amp;gt;` tag
###### This is an `&amp;lt;h6&amp;gt;` tag
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;this-is-an-h1-tag:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;This is an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag&lt;/h1&gt;

&lt;h2 id=&#34;this-is-an-h2-tag:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;This is an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; tag&lt;/h2&gt;

&lt;h6 id=&#34;this-is-an-h6-tag:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;This is an &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; tag&lt;/h6&gt;

&lt;h1 id=&#34;emphasis:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Emphasis&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;*This text will be italic*
_This will also be italic_

**This text will be bold**
__This will also be bold__

_You **can** combine them_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;This text will be italic&lt;/em&gt;
&lt;em&gt;This will also be italic&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This text will be bold&lt;/strong&gt;
&lt;strong&gt;This will also be bold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You &lt;strong&gt;can&lt;/strong&gt; combine them&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;lists:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Lists&lt;/h1&gt;

&lt;h2 id=&#34;unordered:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Unordered&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;* Item 1
* Item 2
  * Item 2a
  * Item 2b
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Item 1&lt;/li&gt;
&lt;li&gt;Item 2

&lt;ul&gt;
&lt;li&gt;Item 2a&lt;/li&gt;
&lt;li&gt;Item 2b&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ordered:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Ordered&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;1. Item 1
2. Item 2
3. Item 3
   * Item 3a
   * Item 3b
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Item 1&lt;/li&gt;
&lt;li&gt;Item 2&lt;/li&gt;
&lt;li&gt;Item 3

&lt;ul&gt;
&lt;li&gt;Item 3a&lt;/li&gt;
&lt;li&gt;Item 3b&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;images:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Images&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;![GitHub Logo](https://github.com/fluidicon.png)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/fluidicon.png&#34; alt=&#34;GitHub Logo&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;links:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com&#34;&gt;http://github.com&lt;/a&gt; - automatic!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[GitHub](http://github.com)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;blockquotes:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Blockquotes&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;As Kanye West said:
&amp;gt; We&#39;re living the future so
&amp;gt; the present is our past.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As Kanye West said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We&amp;rsquo;re living the future so
the present is our past.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;codes:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Codes&lt;/h1&gt;

&lt;h2 id=&#34;inline-code:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Inline code&lt;/h2&gt;

&lt;p&gt;I think you should use an &lt;code&gt;&amp;lt;addr&amp;gt;&lt;/code&gt; element here instead.&lt;/p&gt;

&lt;h2 id=&#34;mutiline-code:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;Mutiline code&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
    printf(&amp;quot;Hello, World!\n&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;more:aa77bbfd89a7b0ff10def205b9c08d51&#34;&gt;More&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;Hugo on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;Mastring Markdown&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>