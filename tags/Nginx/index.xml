<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on Siwei Xu</title>
    <link>https://xusiwei.github.io/tags/Nginx/</link>
    <description>Recent content in Nginx on Siwei Xu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 09 Mar 2016 23:38:56 +0800</lastBuildDate>
    
	<atom:link href="https://xusiwei.github.io/tags/Nginx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NGINX的并发模型</title>
      <link>https://xusiwei.github.io/post/2016/nginx-concurrency-model/</link>
      <pubDate>Wed, 09 Mar 2016 23:38:56 +0800</pubDate>
      
      <guid>https://xusiwei.github.io/post/2016/nginx-concurrency-model/</guid>
      <description>&lt;h2 id=&#34;apache-的并发模型&#34;&gt;Apache 的并发模型&lt;/h2&gt;

&lt;p&gt;Apache 的早期版本的并发模型是 one process per connection，也是早期Unix服务端的主流模型：
主进程accept阻塞在listen fd上，有新的HTTP请求到来时（accept返回connection fd），主进程fork一个服务进程，
专门为该连接服务，HTTP会话结束退出此进程。&lt;/p&gt;

&lt;p&gt;Apache 后来的版本，改用one thread per connection，改用单独一个线程为客户端连接提供服务。
这个模式和之前版本的一样，listen fd和connection fd用的都是阻塞模式。&lt;/p&gt;

&lt;p&gt;使用阻塞模式的好处是，逻辑清晰，编程模型简单。process per connection的好处还有可以保证客户端连接的稳定性
（据说早期Unix的某些版本上多进程模型并不稳定），同时也保证了安全性（即使客户端通过hack手段在connection上拿到了shell也只能控制服务进程）。&lt;/p&gt;

&lt;p&gt;Tomcat 使用的并发模型也是 one thread per connection。开发环境下，在servlet或jsp代码中上打断点，
在有超过一个浏览器访问有断点的servlet时，能够看到Tomcat为每个连接创建了一个线程。&lt;/p&gt;

&lt;p&gt;这种模型下，单个服务器的服务能力主要受到内存的限制，因为每创建一个进程/线程都要消耗一定数量的内存（MB级别）。&lt;/p&gt;

&lt;h2 id=&#34;nginx-的并发模型&#34;&gt;NGINX 的并发模型&lt;/h2&gt;

&lt;p&gt;NIGNX 支持 single 模式 和 master + worker 模式。&lt;/p&gt;

&lt;h3 id=&#34;nginx-master-worker-模式&#34;&gt;NGINX master + worker 模式&lt;/h3&gt;

&lt;p&gt;NGINX通常工作在master + worker模式下，master和worker都是单线程的进程，用户可以通过增加worker进程数实现提高多核CPU的利用率。
同时，这种每个进程仅有一个线程的模型，使得不需要时刻考虑数据的保护问题（如果是多线程则需要考虑）。&lt;/p&gt;

&lt;p&gt;来自Andrew Alexeev的一张图：
&lt;img src=&#34;http://www.aosabook.org/images/nginx/architecture.png&#34; alt=&#34;NGINX architecture&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;master-进程&#34;&gt;master 进程&lt;/h4&gt;

&lt;p&gt;NGINX的master进程，负责解析配置文件，并启动其他角色的进程，如启动worker，cache manager。&lt;/p&gt;

&lt;p&gt;启动完成其他进程之后，master进程仅起监视作用（相当与monitor角色），后面用户可以通过singaller角色的nginx向master发命令，
master再通知它创建起来的其他进程。&lt;/p&gt;

&lt;h4 id=&#34;worker-进程&#34;&gt;worker 进程&lt;/h4&gt;

&lt;p&gt;worker进程是实际服务客户的进程。包括接受新连接（accept），相应连接上的消息（read/write）.&lt;/p&gt;

&lt;h4 id=&#34;singaller-进程&#34;&gt;singaller 进程&lt;/h4&gt;

&lt;p&gt;singaller进程仅仅是一个向master进程发送信号的工具进程。
通过向master发生特定消息，能够让：
* master/worker完成当前服务后，正常退出。
* master进程重新加载配置文件，或者重启worker。
* 重新打开log 文件。&lt;/p&gt;

&lt;h4 id=&#34;cache-manager&#34;&gt;cache manager&lt;/h4&gt;

&lt;p&gt;可以做 HTTP、文件缓存，即对同一个静态文件的请求进行缓存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NGINX 源码安装</title>
      <link>https://xusiwei.github.io/post/2016/nginx-source-install/</link>
      <pubDate>Mon, 07 Mar 2016 23:35:28 +0800</pubDate>
      
      <guid>https://xusiwei.github.io/post/2016/nginx-source-install/</guid>
      <description>&lt;p&gt;NIGNX 是由 Igor Sysoev 开发的一个 Web 服务器。
官网：&lt;a href=&#34;http://nginx.org/&#34;&gt;http://nginx.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载页面： &lt;a href=&#34;http://nginx.org/en/download.html&#34;&gt;http://nginx.org/en/download.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;下载-nginx&#34;&gt;下载 NGINX&lt;/h2&gt;

&lt;p&gt;以 1.8.1 版本为例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://nginx.org/download/nginx-1.8.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;下载依赖库&#34;&gt;下载依赖库&lt;/h2&gt;

&lt;p&gt;NGINX必须依赖zlib和pcre, (若想让nginx支持HTTPS协议，还需OpenSSL)&lt;/p&gt;

&lt;p&gt;NGINX 使用zlib进行gzip编/解码（压缩/解压缩）， zlib: &lt;a href=&#34;http://zlib.net/&#34;&gt;http://zlib.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 zlib-1.2.8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://zlib.net/zlib-1.2.8.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NGINX 使用pcre作正则表达式匹配， pcre: &lt;a href=&#34;http://pcre.org/&#34;&gt;http://pcre.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ftp: &lt;a href=&#34;ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/&#34;&gt;ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 pcre-8.38:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解压&#34;&gt;解压&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;tar xzvf nginx-1.8.1.tar.gz

tar xzvf zlib-1.2.8.tar.gz

tar xzvf pcre-8.38.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd nginx-1.8.1/

./configure --with-pcre=../pcre-8.38 --with-zlib=../zlib-1.2.8
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo make install
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>